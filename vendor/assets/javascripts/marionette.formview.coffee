###*
# FormView Extension of Backbone.Marionette.ItemView
#
# @param {Object} options                   Options defining this FormView
# @param {Object} [options.model]           Form Data.
# @param {Object} [options.fields]          Which Fields to include
#
###

Marionette.FormView = Marionette.ItemView.extend(
  className: 'formView'
  validateOnTheFly: true
  fields: {}
  template: 'someTemplate'
  events: 'submit form': 'onSubmit'
  constructor: ->
    Marionette.ItemView::constructor.apply this, arguments
    if !@model
      throw new Error('Model Must Be Provided')
    # build html
    html = @buildForm()
    @$el.html html
    if @validateOnTheFly
      @initValidateOnTheFly()
    Backbone.Validation.bind this
    @delegateEvents @events
    # Attach Events to preexisting elements if we don't have a template
    # if (!this.template) this.runInitializers();
    # this.on('item:rendered',this.runInitializers, this);
    return
  render: ->
    this
  serializeData: ->
    { formHtml: @buildForm() }
  buildForm: ->
    @fields = if !_.isEmpty(@fields) then @fields else @model.fields
    if _.isEmpty(@fields)
      throw new Error('There are no fields to render')
    fieldset = []
    for i of @fields
      field = @fields[i]
      template = JST['form_view_partials/_' + field.type]
      fieldHtml = template(
        viewId: @cid
        fieldName: i
        label: @model.labels[i]
        type: field.type
        value: @model.get(i) or '')
      fieldset.push fieldHtml
    formTpl = JST['form_view_partials/_form']
    formHtml = formTpl(
      className: @cid
      legend: ''
      fieldset: fieldset)
    formHtml
  initValidateOnTheFly: ->
    onChangeEvents = {}
    for i of @model.validation
      onChangeEvents['change #' + @cid + '_' + i] = 'onFieldChange'
    @events = _.extend(@events, onChangeEvents)
    return
  onBeforeClose: ->
    Backbone.Validation.unbind this
    return
  onSubmit: (e) ->
    e.preventDefault()
    e.stopImmediatePropagation()
    data = @$el.find('form').serializeObject()
    if @model.set(data)
      @model.save()
    return
  onFieldChange: (evt) ->
    $el = $(evt.currentTarget)
    toValidate = {}
    toValidate[$el.attr('name')] = $el.val()
    @model.validate toValidate
    return
)

# ---
# generated by js2coffee 2.0.4
